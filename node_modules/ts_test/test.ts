class test {
    name: string = 'test'
    echo() {
        console.log(this.name)
    }
}

function a() {
    let a = new test()
    a.echo()
}

export default a



//=====================
// let passcode = "gxfm";

// class Employee {
//     private _fullName: string = "old fullName";

//     get fullName(): string {
//         return this._fullName;
//     }

//     set fullName(newString: string) {
//         if (passcode && passcode == "gxm") {
//             this._fullName = newString
//         } else {
//             console.log(`err now is ${this._fullName}`)
//         }
//     }
// }

// let employee = new Employee()
// employee.fullName = `new fullName`
// console.log(employee.fullName)

//=================================
// class Greeter {
//     static str = "类的初始静态值"  //static的值在原型 __proto__.constructor中
//     greeting: string = '1';
//     greet() {
//         if (this.greeting !== '1') {
//             return '' + this.greeting
//         } else {
//             return Greeter.str
//         }
//     }
// }

// let A: Greeter
// A = new Greeter()
// console.log(A)
// console.log(A.greet())

// let B: typeof Greeter = Greeter;   //var B = Greeter 编译为函数但没有构造  // let B = Greeter  也可以通过
// B.str = '通过B修改了类的static'
// console.log(B)

// let C: Greeter = new B()
// console.log(C.greet())
// console.log(A.greet())   //都修改了？？？


//=====================
//typescript 支持
//ts-loader typescript 安装2个
//tsconfig.json  配置

//vue支持typescript 
//vue-property-decorator  安装1个

//声明vue
// declare module "*.vue" {
//     import Vue from 'vue'
//     export default Vue
// }